/**
 * 爬楼梯
 * 给定一个共有 n阶的楼梯，你每步可以上 1阶或者 2阶，但不能连续两轮跳 1阶，请问有多少种方案可以爬到楼顶？
 * 之前可以连续跳的时候，dp[i]定义的是当前 i 阶的方案数，但是这种情况下明显不能适用，所以我们需要重新定义一个状态。
 * 定义状态[i,j]为当前 i 阶，上一次为 跳了 j 阶 j 为 1,2。
 * 那么 dp[i][1] = dp[i-1][2] // 因为不能连续跳，所以只有这种方案
 * dp[i][2] = dp[i-2][1] + dp[i-2][2]
 * 
 * 
 */
function main(n){
    const dp = Array(n+1).fill(-1).map(item=>[-1,-1])
    console.log('dp==',dp)
    dp[1][1] = 1
    dp[1][2] = 0
    dp[2][1] = 0
    dp[2][2] = 1
    for(let i=3; i<= n; i++){
        dp[i][1] = dp[i-1][2]
        dp[i][2] = dp[i - 2][1] + dp[i-2][2]
    }
    return dp[n][1] + dp[n][2];
}
console.log('结果为::',main(3))